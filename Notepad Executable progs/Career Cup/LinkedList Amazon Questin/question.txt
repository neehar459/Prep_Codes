Given an integer linked list of which both first half and second half are sorted independently. Write a function to merge the two parts to create one single sorted linked list in place [do not use any extra space].

Sample test case:

Input: List 1:1->2->3->4->5->1->2; Output: 1->1->2->2->3->4->5

Input 2: 1->5->7->9->11->2->4->6; Output 2: 1->2->4->5->6->7->9->11

C/C++/Java/C#

struct node
{
int val;
node *next;
}

node* sortList(node* list1) {
}

Java

class Node
{
int val;
Node next;
}

Node sortList(Node list1) {
}